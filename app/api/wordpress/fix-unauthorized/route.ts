import { NextRequest, NextResponse } from 'next/server'
import fs from 'fs'
import path from 'path'

const WORDPRESS_CONFIG_FILE_PATH = path.join(process.cwd(), 'data', 'wordpress-config.json')

// L·∫•y c·∫•u h√¨nh WordPress
const getWordPressConfig = () => {
  try {
    if (fs.existsSync(WORDPRESS_CONFIG_FILE_PATH)) {
      const configData = fs.readFileSync(WORDPRESS_CONFIG_FILE_PATH, 'utf8')
      return JSON.parse(configData)
    }
    return null
  } catch (error) {
    console.error('Error loading WordPress config:', error)
    return null
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîß Fixing UNAUTHORIZED issue...')
    
    const body = await request.json()
    const { siteUrl, username, applicationPassword } = body
    
    if (!siteUrl || !username || !applicationPassword) {
      return NextResponse.json({
        success: false,
        error: 'Thi·∫øu th√¥ng tin c·∫•u h√¨nh WordPress'
      }, { status: 400 })
    }

    console.log('üåê Fixing permissions for:', siteUrl)
    console.log('üë§ Username:', username)

    // Create Basic Auth header
    const credentials = Buffer.from(`${username}:${applicationPassword}`).toString('base64')
    
    // Test 1: Check if REST API is accessible without auth
    console.log('üì° Test 1: REST API accessibility...')
    const basicResponse = await fetch(`${siteUrl.replace(/\/$/, '')}/wp-json/`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    })

    console.log('üì• Basic response status:', basicResponse.status)
    
    if (!basicResponse.ok) {
      return NextResponse.json({
        success: false,
        error: `REST API kh√¥ng accessible: ${basicResponse.status}`,
        details: await basicResponse.text(),
        solutions: [
          'Ki·ªÉm tra WordPress c√≥ ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë√∫ng kh√¥ng',
          'Ki·ªÉm tra REST API c√≥ ƒë∆∞·ª£c enable kh√¥ng',
          'T·∫Øt c√°c plugin c√≥ th·ªÉ block REST API'
        ]
      })
    }

    // Test 2: Try different authentication methods
    console.log('üì° Test 2: Authentication methods...')
    
    // Method 1: Basic Auth with current credentials
    const auth1Response = await fetch(`${siteUrl.replace(/\/$/, '')}/wp-json/wp/v2/users/me`, {
      headers: {
        'Authorization': `Basic ${credentials}`,
        'Content-Type': 'application/json',
      }
    })

    console.log('üì• Auth method 1 status:', auth1Response.status)
    
    if (auth1Response.ok) {
      const userData = await auth1Response.json()
      console.log('‚úÖ Authentication successful:', {
        id: userData.id,
        name: userData.name,
        roles: userData.roles
      })
      
      return NextResponse.json({
        success: true,
        message: 'Authentication successful',
        user: {
          id: userData.id,
          name: userData.name,
          email: userData.email,
          roles: userData.roles
        },
        recommendations: [
          'Authentication working correctly',
          'Check user permissions for creating users',
          'Ensure user has administrator or editor role'
        ]
      })
    }

    // Method 2: Try with different header format
    console.log('üì° Test 3: Alternative header format...')
    const auth2Response = await fetch(`${siteUrl.replace(/\/$/, '')}/wp-json/wp/v2/users/me`, {
      headers: {
        'Authorization': `Bearer ${applicationPassword}`,
        'Content-Type': 'application/json',
      }
    })

    console.log('üì• Auth method 2 status:', auth2Response.status)

    // Method 3: Try with username in header
    console.log('üì° Test 4: Username in header...')
    const auth3Response = await fetch(`${siteUrl.replace(/\/$/, '')}/wp-json/wp/v2/users/me`, {
      headers: {
        'Authorization': `Basic ${Buffer.from(`${username}:${applicationPassword}`).toString('base64')}`,
        'X-WP-Username': username,
        'Content-Type': 'application/json',
      }
    })

    console.log('üì• Auth method 3 status:', auth3Response.status)

    // If all methods fail, provide detailed error analysis
    const errorText1 = await auth1Response.text()
    const errorText2 = await auth2Response.text()
    const errorText3 = await auth3Response.text()

    console.error('‚ùå All authentication methods failed')
    console.error('Method 1 error:', errorText1)
    console.error('Method 2 error:', errorText2)
    console.error('Method 3 error:', errorText3)

    return NextResponse.json({
      success: false,
      error: 'T·∫•t c·∫£ ph∆∞∆°ng th·ª©c x√°c th·ª±c ƒë·ªÅu th·∫•t b·∫°i',
      details: {
        method1: { status: auth1Response.status, error: errorText1 },
        method2: { status: auth2Response.status, error: errorText2 },
        method3: { status: auth3Response.status, error: errorText3 }
      },
      solutions: [
        '1. T·∫°o Application Password m·ªõi trong WordPress Admin:',
        '   - V√†o WordPress Admin ‚Üí Users ‚Üí Profile',
        '   - Cu·ªôn xu·ªëng "Application Passwords"',
        '   - T·∫°o password m·ªõi v·ªõi quy·ªÅn ƒë·∫ßy ƒë·ªß',
        '',
        '2. Ki·ªÉm tra user permissions:',
        '   - User ph·∫£i c√≥ role Administrator ho·∫∑c Editor',
        '   - User ph·∫£i c√≥ quy·ªÅn t·∫°o user kh√°c',
        '',
        '3. Ki·ªÉm tra WordPress settings:',
        '   - ƒê·∫£m b·∫£o REST API ƒë∆∞·ª£c enable',
        '   - T·∫Øt c√°c plugin c√≥ th·ªÉ block REST API',
        '   - Ki·ªÉm tra .htaccess kh√¥ng block REST API',
        '',
        '4. Test v·ªõi curl command:',
        `   curl -X GET "${siteUrl}/wp-json/wp/v2/users/me" \\`,
        `   -H "Authorization: Basic ${credentials}" \\`,
        `   -H "Content-Type: application/json"`
      ]
    })

  } catch (error) {
    console.error('‚ùå Error fixing UNAUTHORIZED:', error)
    return NextResponse.json(
      { 
        success: false,
        error: `L·ªói khi fix UNAUTHORIZED: ${error}` 
      },
      { status: 500 }
    )
  }
}
