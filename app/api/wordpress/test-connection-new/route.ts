import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    console.log('üîç Testing WordPress connection with different credentials...')
    const body = await request.json()
    
    const { siteUrl, username, applicationPassword } = body
    
    if (!siteUrl || !username || !applicationPassword) {
      return NextResponse.json(
        { error: 'Thi·∫øu th√¥ng tin c·∫•u h√¨nh WordPress' },
        { status: 400 }
      )
    }

    console.log('üåê Testing connection to:', siteUrl)
    console.log('üë§ Username:', username)
    console.log('üîê Password length:', applicationPassword.length)

    // Test 1: Basic Auth v·ªõi application password
    const credentials1 = Buffer.from(`${username}:${applicationPassword}`).toString('base64')
    
    try {
      const response1 = await fetch(`${siteUrl.replace(/\/$/, '')}/wp-json/wp/v2/users/me`, {
        method: 'GET',
        headers: {
          'Authorization': `Basic ${credentials1}`,
          'Content-Type': 'application/json',
        }
      })

      console.log('üì• Response 1 status:', response1.status)
      
      if (response1.ok) {
        const userData = await response1.json()
        console.log('‚úÖ Connection successful with application password')
        
        return NextResponse.json({
          success: true,
          method: 'application_password',
          message: 'K·∫øt n·ªëi WordPress th√†nh c√¥ng v·ªõi Application Password',
          user: {
            id: userData.id,
            name: userData.name,
            email: userData.email
          }
        })
      }
    } catch (error) {
      console.log('‚ùå Method 1 failed:', error)
    }

    // Test 2: Basic Auth v·ªõi username:password
    const credentials2 = Buffer.from(`${username}:${applicationPassword}`).toString('base64')
    
    try {
      const response2 = await fetch(`${siteUrl.replace(/\/$/, '')}/wp-json/wp/v2/users/me`, {
        method: 'GET',
        headers: {
          'Authorization': `Basic ${credentials2}`,
          'Content-Type': 'application/json',
        }
      })

      console.log('üì• Response 2 status:', response2.status)
      
      if (response2.ok) {
        const userData = await response2.json()
        console.log('‚úÖ Connection successful with username:password')
        
        return NextResponse.json({
          success: true,
          method: 'username_password',
          message: 'K·∫øt n·ªëi WordPress th√†nh c√¥ng v·ªõi Username:Password',
          user: {
            id: userData.id,
            name: userData.name,
            email: userData.email
          }
        })
      }
    } catch (error) {
      console.log('‚ùå Method 2 failed:', error)
    }

    // Test 3: Ki·ªÉm tra site c√≥ ho·∫°t ƒë·ªông kh√¥ng
    try {
      const response3 = await fetch(`${siteUrl.replace(/\/$/, '')}/wp-json/wp/v2/`)
      console.log('üì• Site check status:', response3.status)
      
      if (response3.ok) {
        console.log('‚úÖ Site is accessible')
      } else {
        console.log('‚ùå Site is not accessible')
      }
    } catch (error) {
      console.log('‚ùå Site check failed:', error)
    }

    return NextResponse.json({
      success: false,
      error: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi WordPress',
      suggestions: [
        'Ki·ªÉm tra URL WordPress c√≥ ƒë√∫ng kh√¥ng',
        'Ki·ªÉm tra Application Password c√≥ ƒë√∫ng kh√¥ng',
        'Ki·ªÉm tra WordPress site c√≥ ho·∫°t ƒë·ªông kh√¥ng',
        'Th·ª≠ t·∫°o Application Password m·ªõi trong WordPress Admin'
      ]
    })

  } catch (error) {
    console.error('‚ùå Error testing connection:', error)
    return NextResponse.json(
      { error: `L·ªói khi test k·∫øt n·ªëi: ${error}` },
      { status: 500 }
    )
  }
} 