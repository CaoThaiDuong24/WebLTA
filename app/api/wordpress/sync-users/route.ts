import { NextRequest, NextResponse } from 'next/server'
import fs from 'fs'
import path from 'path'

const WORDPRESS_CONFIG_FILE_PATH = path.join(process.cwd(), 'data', 'wordpress-config.json')

// L·∫•y c·∫•u h√¨nh WordPress
function getWordPressConfig() {
  try {
    if (fs.existsSync(WORDPRESS_CONFIG_FILE_PATH)) {
      const configData = fs.readFileSync(WORDPRESS_CONFIG_FILE_PATH, 'utf8')
      return JSON.parse(configData)
    }
    return null
  } catch (error) {
    console.error('Error loading WordPress config:', error)
    return null
  }
}

export async function GET(request: NextRequest) {
  try {
    console.log('üîÑ Syncing users from WordPress...')
    
    const config = getWordPressConfig()
    if (!config || !config.isConnected) {
      return NextResponse.json({
        success: false,
        error: 'Ch∆∞a k·∫øt n·ªëi v·ªõi WordPress'
      }, { status: 400 })
    }

    // T·∫°o Basic Auth header cho admin WordPress
    const credentials = Buffer.from(`${config.username}:${config.applicationPassword}`).toString('base64')
    
    // L·∫•y t·∫•t c·∫£ users t·ª´ WordPress
    const response = await fetch(`${config.siteUrl.replace(/\/$/, '')}/wp-json/wp/v2/users?per_page=100`, {
      method: 'GET',
      headers: {
        'Authorization': `Basic ${credentials}`,
        'Content-Type': 'application/json',
      }
    })

    if (!response.ok) {
      console.error('‚ùå WordPress API error:', response.status, response.statusText)
      return NextResponse.json({
        success: false,
        error: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn WordPress API'
      }, { status: 500 })
    }

    const users = await response.json()
    console.log('‚úÖ Found', users.length, 'users in WordPress')

    // Transform users data
    const transformedUsers = users.map((user: any) => ({
      id: user.id,
      username: user.slug,
      name: user.name,
      email: user.email,
      firstName: user.first_name || '',
      lastName: user.last_name || '',
      role: user.roles?.[0] || 'subscriber',
      status: 'active', // WordPress kh√¥ng c√≥ tr·∫°ng th√°i inactive m·∫∑c ƒë·ªãnh
      avatar: user.avatar_urls?.['96'] || '',
      lastLogin: user.last_login || '',
      joinDate: user.registered_date || user.date || '',
      loginCount: 0 // WordPress kh√¥ng track login count m·∫∑c ƒë·ªãnh
    }))

    return NextResponse.json({
      success: true,
      message: `ƒê√£ ƒë·ªìng b·ªô ${transformedUsers.length} t√†i kho·∫£n t·ª´ WordPress`,
      users: transformedUsers,
      total: transformedUsers.length
    })

  } catch (error) {
    console.error('‚ùå Error syncing WordPress users:', error)
    return NextResponse.json({
      success: false,
      error: 'L·ªói server'
    }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ Syncing specific user from WordPress...')
    
    const { email } = await request.json()
    
    if (!email) {
      return NextResponse.json({
        success: false,
        error: 'Email l√† b·∫Øt bu·ªôc'
      }, { status: 400 })
    }

    const config = getWordPressConfig()
    if (!config || !config.isConnected) {
      return NextResponse.json({
        success: false,
        error: 'Ch∆∞a k·∫øt n·ªëi v·ªõi WordPress'
      }, { status: 400 })
    }

    // T·∫°o Basic Auth header cho admin WordPress
    const credentials = Buffer.from(`${config.username}:${config.applicationPassword}`).toString('base64')
    
    // T√¨m user c·ª• th·ªÉ trong WordPress
    const response = await fetch(`${config.siteUrl.replace(/\/$/, '')}/wp-json/wp/v2/users?search=${encodeURIComponent(email)}`, {
      method: 'GET',
      headers: {
        'Authorization': `Basic ${credentials}`,
        'Content-Type': 'application/json',
      }
    })

    if (!response.ok) {
      console.error('‚ùå WordPress API error:', response.status, response.statusText)
      return NextResponse.json({
        success: false,
        error: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn WordPress API'
      }, { status: 500 })
    }

    const users = await response.json()
    
    if (users.length === 0) {
      return NextResponse.json({
        success: false,
        error: 'Kh√¥ng t√¨m th·∫•y user v·ªõi email n√†y trong WordPress'
      }, { status: 404 })
    }

    const user = users[0]
    console.log('‚úÖ Found user:', user.name, user.email)

    // Transform user data
    const transformedUser = {
      id: user.id,
      username: user.slug,
      name: user.name,
      email: user.email,
      firstName: user.first_name || '',
      lastName: user.last_name || '',
      role: user.roles?.[0] || 'subscriber',
      status: 'active',
      avatar: user.avatar_urls?.['96'] || '',
      lastLogin: user.last_login || '',
      joinDate: user.registered_date || user.date || '',
      loginCount: 0
    }

    return NextResponse.json({
      success: true,
      message: 'ƒê√£ ƒë·ªìng b·ªô t√†i kho·∫£n t·ª´ WordPress',
      user: transformedUser
    })

  } catch (error) {
    console.error('‚ùå Error syncing specific WordPress user:', error)
    return NextResponse.json({
      success: false,
      error: 'L·ªói server'
    }, { status: 500 })
  }
} 