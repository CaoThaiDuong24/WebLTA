'use client'

import { useState, useRef } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { 
  Download, 
  Upload, 
  RefreshCw,
  Save,
  FileText,
  AlertTriangle,
  CheckCircle,
  Loader2
} from 'lucide-react'
import { useToast } from '@/hooks/use-toast'

export default function BackupPage() {
  const { toast } = useToast()
  const [isExporting, setIsExporting] = useState(false)
  const [isImporting, setIsImporting] = useState(false)
  const [isAutoBackup, setIsAutoBackup] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)

  // Export backup
  const exportBackup = async () => {
    try {
      setIsExporting(true)
      console.log('üì¶ Starting export...')
      
      const response = await fetch('/api/backup/export')
      
      if (response.ok) {
        const blob = await response.blob()
        const url = window.URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = `lta-backup-${new Date().toISOString().replace(/[:.]/g, '-')}.json`
        document.body.appendChild(a)
        a.click()
        window.URL.revokeObjectURL(url)
        document.body.removeChild(a)
        
        toast({
          title: "‚úÖ Export th√†nh c√¥ng",
          description: "File backup ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªÅ",
        })
      } else {
        const error = await response.json()
        throw new Error(error.error || 'L·ªói khi export')
      }
    } catch (error: any) {
      console.error('‚ùå Export error:', error)
      toast({
        title: "‚ùå L·ªói export",
        description: error.message || "Kh√¥ng th·ªÉ export d·ªØ li·ªáu",
        variant: "destructive",
      })
    } finally {
      setIsExporting(false)
    }
  }

  // Import backup
  const importBackup = async (file: File) => {
    try {
      setIsImporting(true)
      console.log('üì¶ Starting import...')
      
      const formData = new FormData()
      formData.append('file', file)
      
      const response = await fetch('/api/backup/import', {
        method: 'POST',
        body: formData
      })
      
      const result = await response.json()
      
      if (response.ok) {
        toast({
          title: "‚úÖ Import th√†nh c√¥ng",
          description: result.message,
        })
        
        // Reload page ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu
        window.location.reload()
      } else {
        throw new Error(result.error || 'L·ªói khi import')
      }
    } catch (error: any) {
      console.error('‚ùå Import error:', error)
      toast({
        title: "‚ùå L·ªói import",
        description: error.message || "Kh√¥ng th·ªÉ import d·ªØ li·ªáu",
        variant: "destructive",
      })
    } finally {
      setIsImporting(false)
    }
  }

  // Auto backup
  const createAutoBackup = async () => {
    try {
      setIsAutoBackup(true)
      console.log('üîÑ Starting auto backup...')
      
      const response = await fetch('/api/backup/auto-backup', {
        method: 'POST'
      })
      
      const result = await response.json()
      
      if (response.ok) {
        toast({
          title: "‚úÖ Auto backup th√†nh c√¥ng",
          description: result.message,
        })
      } else {
        throw new Error(result.error || 'L·ªói khi auto backup')
      }
    } catch (error: any) {
      console.error('‚ùå Auto backup error:', error)
      toast({
        title: "‚ùå L·ªói auto backup",
        description: error.message || "Kh√¥ng th·ªÉ t·∫°o auto backup",
        variant: "destructive",
      })
    } finally {
      setIsAutoBackup(false)
    }
  }

  // Handle file selection
  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      importBackup(file)
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold">Qu·∫£n l√Ω Backup & Restore</h1>
        <p className="text-muted-foreground">Sao l∆∞u v√† kh√¥i ph·ª•c d·ªØ li·ªáu tin t·ª©c</p>
      </div>

      {/* Warning Alert */}
      <Alert className="border-orange-200 bg-orange-50 dark:border-orange-800 dark:bg-orange-900/20">
        <AlertTriangle className="h-4 w-4 text-orange-600 dark:text-orange-400" />
        <AlertDescription className="text-orange-800 dark:text-orange-200">
          <strong>Quan tr·ªçng:</strong> Lu√¥n t·∫°o backup tr∆∞·ªõc khi deploy code m·ªõi l√™n production ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu.
        </AlertDescription>
      </Alert>

      <div className="grid gap-6 grid-cols-1 lg:grid-cols-2">
        {/* Export Backup */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Download className="h-5 w-5" />
              <span>Export Backup</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-sm text-gray-600">
              T·∫£i v·ªÅ file backup ch·ª©a t·∫•t c·∫£ d·ªØ li·ªáu tin t·ª©c hi·ªán t·∫°i. 
              File n√†y c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ kh√¥i ph·ª•c d·ªØ li·ªáu sau khi deploy.
            </p>
            
            <Button 
              onClick={exportBackup} 
              disabled={isExporting}
              className="w-full"
            >
              {isExporting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ƒêang export...
                </>
              ) : (
                <>
                  <Download className="mr-2 h-4 w-4" />
                  T·∫£i v·ªÅ Backup
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        {/* Import Backup */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Upload className="h-5 w-5" />
              <span>Import Backup</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-sm text-gray-600">
              Kh√¥i ph·ª•c d·ªØ li·ªáu t·ª´ file backup. 
              D·ªØ li·ªáu hi·ªán t·∫°i s·∫Ω ƒë∆∞·ª£c merge v·ªõi d·ªØ li·ªáu t·ª´ backup.
            </p>
            
            <input
              ref={fileInputRef}
              type="file"
              accept=".json"
              onChange={handleFileSelect}
              className="hidden"
            />
            
            <Button 
              onClick={() => fileInputRef.current?.click()} 
              disabled={isImporting}
              variant="outline"
              className="w-full"
            >
              {isImporting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ƒêang import...
                </>
              ) : (
                <>
                  <Upload className="mr-2 h-4 w-4" />
                  Ch·ªçn File Backup
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        {/* Auto Backup */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Save className="h-5 w-5" />
              <span>Auto Backup</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-sm text-gray-600">
              T·∫°o backup t·ª± ƒë·ªông v√† l∆∞u v√†o server. 
              H·ªá th·ªëng s·∫Ω gi·ªØ l·∫°i 10 file backup g·∫ßn nh·∫•t.
            </p>
            
            <Button 
              onClick={createAutoBackup} 
              disabled={isAutoBackup}
              variant="outline"
              className="w-full"
            >
              {isAutoBackup ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ƒêang t·∫°o backup...
                </>
              ) : (
                <>
                  <Save className="mr-2 h-4 w-4" />
              T·∫°o Auto Backup
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        {/* Backup Info */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <FileText className="h-5 w-5" />
              <span>Th√¥ng tin Backup</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <CheckCircle className="h-4 w-4 text-green-500" />
                <span className="text-sm">Backup ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c data/backups/</span>
              </div>
              <div className="flex items-center space-x-2">
                <CheckCircle className="h-4 w-4 text-green-500" />
                <span className="text-sm">T·ª± ƒë·ªông gi·ªØ l·∫°i 10 file backup g·∫ßn nh·∫•t</span>
              </div>
              <div className="flex items-center space-x-2">
                <CheckCircle className="h-4 w-4 text-green-500" />
                <span className="text-sm">Merge d·ªØ li·ªáu khi import (kh√¥ng ghi ƒë√®)</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Instructions */}
      <Card>
        <CardHeader>
          <CardTitle>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <h4 className="font-medium">Tr∆∞·ªõc khi deploy code m·ªõi:</h4>
            <ol className="list-decimal list-inside space-y-1 text-sm text-gray-600">
              <li>T·∫°o Auto Backup ho·∫∑c Export Backup</li>
              <li>L∆∞u file backup v√†o n∆°i an to√†n</li>
              <li>Deploy code m·ªõi</li>
              <li>Import Backup n·∫øu c·∫ßn kh√¥i ph·ª•c d·ªØ li·ªáu</li>
            </ol>
          </div>
          
          <div className="space-y-2">
            <h4 className="font-medium">L∆∞u √Ω quan tr·ªçng:</h4>
            <ul className="list-disc list-inside space-y-1 text-sm text-gray-600">
              <li>Lu√¥n backup tr∆∞·ªõc khi deploy</li>
              <li>File backup ch·ª©a t·∫•t c·∫£ d·ªØ li·ªáu tin t·ª©c</li>
              <li>Import s·∫Ω merge d·ªØ li·ªáu, kh√¥ng ghi ƒë√® ho√†n to√†n</li>
              <li>Auto backup ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông tr√™n server</li>
            </ul>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
